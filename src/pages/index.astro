---
import Layout from '../layouts/Layout.astro';
import CyberLayout from '../layouts/CyberLayout.astro';
import TypedText from '../components/TypedText.astro';
import PuzzleForm from '../components/PuzzleForm.astro';
import AsciiHeader from '../components/AsciiHeader.astro';
import LoadingScreen from '../components/LoadingScreen.astro';
---

<Layout title="Cyber Scavenger Hunt">
	<LoadingScreen />
	<CyberLayout>
		<AsciiHeader title="MISSION: CYBER SHIELD" />
		
		<!-- Intro Video Container -->
		<div id="intro-video-container" class="video-container">
			<video id="intro-video" class="intro-video" preload="auto">
				<source src="/intro.mp4" type="video/mp4">
				Your browser does not support the video tag.
			</video>
			<div class="video-overlay">
				<button id="skip-intro" class="skip-button">SKIP INTRO</button>
			</div>
		</div>

		<!-- Main Content (Hidden initially) -->
		<div id="main-content" class="hidden">
			<div class="terminal-container">
				<div class="terminal-header">
					<div class="terminal-title">TERMINAL ACCESS</div>
					<div class="terminal-controls">
						<span class="control minimize"></span>
						<span class="control maximize"></span>
						<span class="control close"></span>
					</div>
				</div>
				
				<div class="terminal-body">
					<div class="terminal-line">
						<span class="prompt">$</span>
						<TypedText text="./start_mission.sh" delay={500} speed={70} />
					</div>
					
					<div class="terminal-output" id="welcome-message">
						<TypedText text="MISSION BRIEFING: OPERATION CYBER SHIELD" delay={2000} speed={30} className="welcome-title" />
						
						<div class="welcome-content" style="opacity: 0;">
							<div class="story-section">
								<p>üîê <strong>ATTENTION RECRUIT!</strong> üîê</p>
								<p>Welcome to your first day at the Cyber Defense Academy. I'm Commander Hayes, your instructor.</p>
								<p>We've received reports that a hacker group called "The Phantoms" is planning to attack the university's network. As a new recruit, you've been chosen for a special training mission to test your problem-solving skills.</p>
								<p>This training simulation will prepare you for real cybersecurity challenges. Are you ready to begin?</p>
							</div>
							
							<div class="mission-details">
								<h3>üìã MISSION DETAILS:</h3>
								<ul>
									<li>Complete each challenge to advance to the next stage</li>
									<li>Use the hints if you get stuck</li>
									<li>No specialized knowledge required - just your problem-solving skills!</li>
								</ul>
							</div>
							
							<div class="interactive-elements">
								<div class="status-panel">
									<div class="status-item">
										<span class="status-label">MISSION STATUS:</span>
										<span class="status-value blink-text">ACTIVE</span>
									</div>
									<div class="status-item">
										<span class="status-label">SECURITY LEVEL:</span>
										<span class="status-value">TRAINING</span>
									</div>
									<div class="status-item">
										<span class="status-label">SYSTEM:</span>
										<span class="status-value system-status">ONLINE</span>
									</div>
								</div>
								
								<div class="cyber-decoration">
									<div class="cyber-grid"></div>
									<div class="cyber-scanner"></div>
								</div>
							</div>
							
							<PuzzleForm 
								id="start-puzzle"
								question="FIRST CHALLENGE: The Phantoms often use a type of malicious software that locks users out of their files and demands payment. What is this type of attack called?"
								hint="Think about software that holds your files for 'ransom'. You might have heard about these attacks on the news when they target hospitals or cities."
								answer="ransomware"
								onSuccess="unlockStage2"
							/>
						</div>
					</div>
				</div>
			</div>
		</div>
	</CyberLayout>
</Layout>

<style>
	/* Video Styles */
	.video-container {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 720px; /* Increased from 420px to accommodate HD video */
		height: 480px; /* Increased from 360px to maintain aspect ratio */
		z-index: 100;
		background-color: #000;
		border: 2px solid var(--terminal-accent);
		box-shadow: 0 0 20px rgba(139, 233, 253, 0.5);
		border-radius: 8px;
		overflow: hidden;
	}
	
	.intro-video {
		width: 100%;
		height: 100%;
		object-fit: contain; /* Changed from cover to contain to show full video */
	}
	
	.video-overlay {
		position: absolute;
		bottom: 20px;
		right: 20px;
		z-index: 101;
	}
	
	.skip-button {
		background-color: rgba(0, 0, 0, 0.7);
		color: white;
		border: 1px solid rgba(255, 255, 255, 0.3);
		padding: 8px 16px;
		cursor: pointer;
		font-family: 'Courier New', monospace;
		transition: all 0.3s ease;
		border-radius: 4px;
	}
	
	.skip-button:hover {
		background-color: rgba(139, 233, 253, 0.3);
		border-color: var(--terminal-accent);
		transform: scale(1.05);
		box-shadow: 0 0 10px rgba(139, 233, 253, 0.5);
	}
	
	.hidden {
		display: none;
	}
	
	/* Terminal Styles */
	.terminal-container {
		width: 100%;
		max-width: 800px;
		margin: 0 auto;
		background-color: var(--terminal-bg);
		border-radius: 8px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
		overflow: hidden;
		animation: glitchIn 1s ease-out;
	}
	
	.terminal-header {
		background-color: var(--terminal-header);
		padding: 10px 15px;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-bottom: 1px solid var(--terminal-dim);
	}
	
	.terminal-title {
		color: var(--terminal-dim);
		font-size: 0.9em;
		font-weight: bold;
	}
	
	.terminal-controls {
		display: flex;
		gap: 8px;
	}
	
	.control {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		display: inline-block;
	}
	
	.minimize {
		background-color: #f1fa8c;
	}
	
	.maximize {
		background-color: #50fa7b;
	}
	
	.close {
		background-color: #ff5555;
	}
	
	.terminal-body {
		padding: 20px;
		color: var(--terminal-text);
		font-family: 'Courier New', monospace;
		min-height: 400px;
	}
	
	.terminal-line {
		display: flex;
		align-items: center;
		margin-bottom: 15px;
	}
	
	.prompt {
		color: var(--terminal-success);
		margin-right: 10px;
	}
	
	.terminal-output {
		margin-top: 20px;
	}
	
	.welcome-title {
		color: var(--terminal-accent);
		font-size: 1.2em;
		font-weight: bold;
		margin-bottom: 20px;
		display: block;
	}
	
	.welcome-content {
		transition: opacity 1s ease-in-out;
	}
	
	.story-section {
		margin-bottom: 20px;
		padding: 15px;
		border-left: 3px solid var(--terminal-accent);
		background-color: rgba(139, 233, 253, 0.05);
	}
	
	.mission-details {
		margin-bottom: 20px;
		padding: 15px;
		border: 1px dashed var(--terminal-dim);
		border-radius: 4px;
	}
	
	.mission-details h3 {
		color: var(--terminal-warning);
		margin-top: 0;
	}
	
	.mission-details ul {
		padding-left: 20px;
	}
	
	/* Interactive Elements */
	.interactive-elements {
		margin: 25px 0;
		display: flex;
		flex-direction: column;
		gap: 20px;
	}
	
	.status-panel {
		background-color: rgba(0, 0, 0, 0.3);
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		padding: 15px;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 10px;
	}
	
	.status-item {
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	
	.status-label {
		font-size: 0.7em;
		color: var(--terminal-dim);
		margin-bottom: 5px;
	}
	
	.status-value {
		font-weight: bold;
		color: var(--terminal-accent);
	}
	
	.blink-text {
		animation: blink-text 1.5s infinite;
		color: var(--terminal-warning);
	}
	
	.system-status {
		color: var(--terminal-success);
	}
	
	.cyber-decoration {
		position: relative;
		height: 60px;
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		overflow: hidden;
	}
	
	.cyber-grid {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-image: 
			linear-gradient(rgba(139, 233, 253, 0.1) 1px, transparent 1px),
			linear-gradient(90deg, rgba(139, 233, 253, 0.1) 1px, transparent 1px);
		background-size: 20px 20px;
		z-index: 1;
	}
	
	.cyber-scanner {
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, 
			transparent 0%, 
			rgba(139, 233, 253, 0.1) 50%, 
			transparent 100%);
		animation: scanner 3s linear infinite;
		z-index: 2;
	}
	
	/* Glitch Animation */
	@keyframes glitchIn {
		0% {
			opacity: 0;
			clip-path: inset(0 0 100% 0);
			transform: translateY(50px);
		}
		20% {
			clip-path: inset(33% 0 66% 0);
		}
		40% {
			clip-path: inset(66% 0 33% 0);
		}
		60% {
			clip-path: inset(33% 0 66% 0);
		}
		80% {
			clip-path: inset(10% 0 90% 0);
		}
		100% {
			opacity: 1;
			clip-path: inset(0 0 0 0);
			transform: translateY(0);
		}
	}
	
	@keyframes blink-text {
		0%, 49% {
			opacity: 1;
		}
		50%, 100% {
			opacity: 0.5;
		}
	}
	
	@keyframes scanner {
		0% {
			left: -100%;
		}
		100% {
			left: 100%;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Video handling
		const introVideo = document.getElementById('intro-video');
		const introContainer = document.getElementById('intro-video-container');
		const mainContent = document.getElementById('main-content');
		const skipButton = document.getElementById('skip-intro');
		
		// Initially hide the video container until loading screen is done
		if (introContainer) {
			introContainer.classList.add('hidden');
		}
		
		// Listen for loading screen completion
		document.addEventListener('loadingScreenComplete', () => {
			// Show video container after loading screen is done
			if (introContainer) {
				introContainer.classList.remove('hidden');
			}
			
			// Auto-play video if possible
			if (introVideo) {
				introVideo.play().catch(error => {
					console.log('Auto-play prevented:', error);
					// If auto-play is prevented, show a play button
					if (introContainer) {
						const playButton = document.createElement('button');
						playButton.innerText = 'START MISSION';
						playButton.className = 'play-button';
						playButton.style.position = 'absolute';
						playButton.style.top = '50%';
						playButton.style.left = '50%';
						playButton.style.transform = 'translate(-50%, -50%)';
						playButton.style.padding = '15px 30px';
						playButton.style.backgroundColor = 'rgba(139, 233, 253, 0.2)';
						playButton.style.color = 'white';
						playButton.style.border = '1px solid var(--terminal-accent)';
						playButton.style.cursor = 'pointer';
						playButton.style.fontFamily = 'Courier New, monospace';
						playButton.style.fontSize = '1.2em';
						playButton.style.zIndex = '102';
						playButton.style.borderRadius = '4px';
						playButton.style.transition = 'all 0.3s ease';
						
						// Add hover effect
						playButton.addEventListener('mouseover', () => {
							playButton.style.backgroundColor = 'rgba(139, 233, 253, 0.4)';
							playButton.style.transform = 'translate(-50%, -50%) scale(1.05)';
							playButton.style.boxShadow = '0 0 15px rgba(139, 233, 253, 0.5)';
						});
						
						playButton.addEventListener('mouseout', () => {
							playButton.style.backgroundColor = 'rgba(139, 233, 253, 0.2)';
							playButton.style.transform = 'translate(-50%, -50%)';
							playButton.style.boxShadow = 'none';
						});
						
						playButton.addEventListener('click', () => {
							introVideo.play().then(() => {
								playButton.remove();
							}).catch(() => {
								// If still can't play, just show the main content
								showMainContent();
							});
						});
						
						introContainer.appendChild(playButton);
					}
				});
			}
		});
		
		// Function to show main content
		const showMainContent = () => {
			// Add glitch transition effect
			document.body.classList.add('glitch-transition');
			
			// Hide video container
			if (introContainer) {
				introContainer.style.opacity = '0';
				setTimeout(() => {
					introContainer.classList.add('hidden');
					// Show main content
					if (mainContent) {
						mainContent.classList.remove('hidden');
					}
					document.body.classList.remove('glitch-transition');
				}, 1000);
			}
		};
		
		// Skip button event
		if (skipButton) {
			skipButton.addEventListener('click', () => {
				if (introVideo) {
					introVideo.pause();
				}
				showMainContent();
			});
		}
		
		// Video ended event
		if (introVideo) {
			introVideo.addEventListener('ended', showMainContent);
		}
		
		// Show welcome content after title is typed
		const welcomeTitle = document.querySelector('.welcome-title');
		if (welcomeTitle) {
			welcomeTitle.addEventListener('typingComplete', () => {
				setTimeout(() => {
					const welcomeContent = document.querySelector('.welcome-content');
					if (welcomeContent) {
						welcomeContent.style.opacity = '1';
					}
				}, 500);
			});
		}
		
		// Add unlock stage 2 function
		window.unlockStage2 = () => {
			// Add glitch transition effect
			document.body.classList.add('glitch-transition');
			
			setTimeout(() => {
				// Store completion in localStorage
				localStorage.setItem('puzzle_start-puzzle', 'solved');
				
				// Redirect to stage 2
				window.location.href = '/stage2';
			}, 1000);
		};
	});
</script>
