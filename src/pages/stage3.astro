---
import Layout from '../layouts/Layout.astro';
import CyberLayout from '../layouts/CyberLayout.astro';
import TypedText from '../components/TypedText.astro';
import PuzzleForm from '../components/PuzzleForm.astro';
import AsciiHeader from '../components/AsciiHeader.astro';
---

<Layout title="Stage 3 - Cyber Scavenger Hunt">
	<CyberLayout>
		<AsciiHeader title="MISSION: FINAL STAGE" />
		
		<div class="terminal-container">
			<div class="terminal-header">
				<div class="terminal-title">MISSION: FINAL STAGE</div>
				<div class="terminal-controls">
					<span class="control minimize"></span>
					<span class="control maximize"></span>
					<span class="control close"></span>
				</div>
			</div>
			
			<div class="terminal-body">
				<div class="terminal-line">
					<span class="prompt">$</span>
					<TypedText text="./final_mission.sh" delay={500} speed={70} />
				</div>
				
				<div class="terminal-output" id="stage3-content">
					<TypedText text="MISSION UPDATE: STOPPING THE ATTACK" delay={2000} speed={30} className="stage-title" />
					
					<div class="stage-content" style="opacity: 0;">
						<div class="story-section">
							<p>üîí <strong>WELL DONE, AGENT!</strong> üîí</p>
							<p>"Excellent work identifying the phishing attack," Commander Hayes says with approval. "We've traced The Phantoms to their secret server. Now we need to secure our systems before they launch their attack."</p>
							<p>The commander's expression turns serious. "This is your final test. Show us you have what it takes to join our cybersecurity team."</p>
						</div>
						
						<div class="mission-objective">
							<h3>üéØ FINAL MISSION:</h3>
							<p>Complete this final challenge to secure our systems and stop The Phantoms' attack!</p>
						</div>
						
						<div class="final-challenges">
							<div class="challenge-container">
								<div class="challenge-header">
									<div class="challenge-icon">üîê</div>
									<div class="challenge-title">SYSTEM SECURITY</div>
								</div>
								
								<PuzzleForm 
									id="password-puzzle"
									question="The Phantoms might try to guess our passwords. What's the MINIMUM number of characters a strong password should have according to current cybersecurity standards?"
									hint="Modern password standards recommend longer passwords. Think about what length would be resistant to brute force attacks while still being memorable."
									answer="12"
									onSuccess="completeMission"
								/>
							</div>
						</div>
						
						<div id="mission-complete" class="hidden">
							<div class="success-message">
								<div class="success-header">üéâ CHALLENGE COMPLETED üéâ</div>
								<div class="success-content">
									<p>"Outstanding work, agent!" Commander Hayes exclaims. "You've successfully secured our systems."</p>
									<p>"One final task remains. The key you saw in the decrypted image - enter it now to complete your mission."</p>
								</div>
							</div>
							
							<div class="key-verification">
								<div id="countdown-timer" class="countdown-timer">
									<div class="timer-label">TIME REMAINING:</div>
									<div class="timer-value">60</div>
								</div>
								<PuzzleForm 
									id="key-verification"
									question="URGENT: We only have 60 seconds! Enter the two-digit number you saw in the decrypted image:"
									hint="This was the number visible in the cyber-lock.jpg image that was revealed after solving all three puzzles in Stage 2."
									answer="42"
									onSuccess="verifyKey"
								/>
							</div>
							
							<div id="qr-code-reveal" class="hidden">
								<div class="success-message special-success">
									<div class="success-header">üèÜ CONGRATULATIONS! üèÜ</div>
									<div class="success-content">
										<p class="completion-count">You are the <span id="completion-number">1st</span> person to complete this challenge!</p>
										<p>Your reward:</p>
									</div>
								</div>
								
								<div class="qr-code-container">
									<img src="/qr-code.png" alt="QR Code" class="qr-code" id="reward-qr-code" />
								</div>
							</div>
							
							<div class="certificate">
								<div class="certificate-header">CERTIFICATE OF COMPLETION</div>
								<div class="certificate-title">CYBER SCAVENGER HUNT</div>
								<div class="certificate-text">This certifies that</div>
								<div class="certificate-name">AGENT <span id="agent-name">RECRUIT</span></div>
								<div class="certificate-text">has successfully completed all challenges</div>
								<div class="certificate-date">Date: <span id="completion-date">TODAY</span></div>
							</div>
							
							<div class="restart-container">
								<button id="restart-button" class="restart-button">START NEW MISSION</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</CyberLayout>
</Layout>

<style>
	.terminal-container {
		width: 100%;
		max-width: 800px;
		margin: 0 auto;
		background-color: var(--terminal-bg);
		border-radius: 8px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
		overflow: hidden;
		animation: glitchIn 1s ease-out;
	}
	
	.terminal-header {
		background-color: var(--terminal-header);
		padding: 10px 15px;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-bottom: 1px solid var(--terminal-dim);
	}
	
	.terminal-title {
		color: var(--terminal-dim);
		font-size: 0.9em;
		font-weight: bold;
	}
	
	.terminal-controls {
		display: flex;
		gap: 8px;
	}
	
	.control {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		display: inline-block;
	}
	
	.minimize {
		background-color: #f1fa8c;
	}
	
	.maximize {
		background-color: #50fa7b;
	}
	
	.close {
		background-color: #ff5555;
	}
	
	.terminal-body {
		padding: 20px;
		color: var(--terminal-text);
		font-family: 'Courier New', monospace;
		min-height: 400px;
	}
	
	.terminal-line {
		display: flex;
		align-items: center;
		margin-bottom: 15px;
	}
	
	.prompt {
		color: var(--terminal-success);
		margin-right: 10px;
	}
	
	.terminal-output {
		margin-top: 20px;
	}
	
	.stage-title {
		color: var(--terminal-accent);
		font-size: 1.2em;
		font-weight: bold;
		margin-bottom: 20px;
		display: block;
	}
	
	.stage-content {
		transition: opacity 1s ease-in-out;
	}
	
	.story-section {
		margin-bottom: 20px;
		padding: 15px;
		border-left: 3px solid var(--terminal-accent);
		background-color: rgba(139, 233, 253, 0.05);
	}
	
	.mission-objective {
		margin-bottom: 20px;
		padding: 15px;
		border: 1px dashed var(--terminal-dim);
		border-radius: 4px;
	}
	
	.mission-objective h3 {
		color: var(--terminal-warning);
		margin-top: 0;
	}
	
	/* Challenge Styles */
	.final-challenges {
		display: flex;
		flex-direction: column;
		gap: 20px;
		margin: 30px 0;
	}
	
	.challenge-container {
		background-color: rgba(0, 0, 0, 0.3);
		border: 1px solid var(--terminal-dim);
		border-radius: 8px;
		overflow: hidden;
		transition: all 0.3s ease;
	}
	
	.challenge-container.locked {
		opacity: 0.7;
		filter: grayscale(70%);
	}
	
	.challenge-container.completed {
		border-color: var(--terminal-success);
		box-shadow: 0 0 15px rgba(80, 250, 123, 0.3);
	}
	
	.challenge-header {
		background-color: rgba(0, 0, 0, 0.3);
		padding: 10px 15px;
		display: flex;
		align-items: center;
		gap: 10px;
		border-bottom: 1px solid var(--terminal-dim);
	}
	
	.challenge-icon {
		font-size: 1.5em;
	}
	
	.challenge-title {
		font-weight: bold;
		color: var(--terminal-accent);
	}
	
	.locked-message {
		padding: 20px;
		text-align: center;
		color: var(--terminal-dim);
		font-style: italic;
	}
	
	.challenge-content {
		padding: 20px;
	}
	
	/* Countdown Timer */
	.countdown-timer {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 10px;
		margin-bottom: 15px;
		padding: 10px;
		background-color: rgba(255, 85, 85, 0.1);
		border: 1px solid var(--terminal-error);
		border-radius: 4px;
	}
	
	.timer-label {
		font-weight: bold;
		color: var(--terminal-error);
	}
	
	.timer-value {
		font-size: 1.5em;
		font-weight: bold;
		color: var(--terminal-error);
		min-width: 40px;
		text-align: center;
	}
	
	/* Key Verification */
	.key-verification {
		margin: 30px 0;
		padding: 20px;
		background-color: rgba(139, 233, 253, 0.05);
		border: 2px dashed var(--terminal-accent);
		border-radius: 8px;
		animation: pulseBorder 2s infinite;
	}
	
	@keyframes pulseBorder {
		0%, 100% {
			border-color: var(--terminal-accent);
			box-shadow: 0 0 10px rgba(139, 233, 253, 0.3);
		}
		50% {
			border-color: var(--terminal-warning);
			box-shadow: 0 0 20px rgba(255, 184, 108, 0.3);
		}
	}
	
	/* QR Code */
	.qr-code-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: 30px 0;
		padding: 20px;
		background-color: white;
		border-radius: 8px;
		box-shadow: 0 0 30px rgba(139, 233, 253, 0.5);
		animation: glitchIn 1s ease-out, glow 3s infinite;
	}
	
	.qr-code {
		max-width: 250px;
		height: auto;
		margin-bottom: 15px;
	}
	
	@keyframes glow {
		0%, 100% {
			box-shadow: 0 0 20px rgba(139, 233, 253, 0.5);
		}
		50% {
			box-shadow: 0 0 40px rgba(139, 233, 253, 0.8);
		}
	}
	
	.special-success {
		background-color: rgba(255, 184, 108, 0.1);
		border-color: var(--terminal-warning);
	}
	
	.completion-count {
		font-size: 1.2em;
		font-weight: bold;
		color: var(--terminal-warning);
		text-align: center;
		margin: 20px 0;
	}
	
	/* Success Message */
	.success-message {
		margin: 30px 0;
		padding: 20px;
		border: 2px solid var(--terminal-success);
		border-radius: 8px;
		background-color: rgba(80, 250, 123, 0.1);
		animation: glitchIn 0.8s ease-out;
	}
	
	.success-header {
		font-size: 1.5em;
		font-weight: bold;
		color: var(--terminal-success);
		text-align: center;
		margin-bottom: 15px;
	}
	
	.success-content {
		line-height: 1.6;
	}
	
	/* Certificate */
	.certificate {
		margin: 40px auto;
		padding: 30px;
		max-width: 600px;
		background-color: rgba(255, 255, 255, 0.05);
		border: 2px solid var(--terminal-accent);
		border-radius: 8px;
		text-align: center;
		position: relative;
		overflow: hidden;
	}
	
	.certificate::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
		opacity: 0.5;
		z-index: -1;
	}
	
	.certificate-header {
		font-size: 0.8em;
		color: var(--terminal-dim);
		margin-bottom: 10px;
		letter-spacing: 2px;
	}
	
	.certificate-title {
		font-size: 1.8em;
		font-weight: bold;
		color: var(--terminal-accent);
		margin-bottom: 20px;
		letter-spacing: 3px;
		text-shadow: 0 0 10px rgba(139, 233, 253, 0.5);
	}
	
	.certificate-text {
		color: var(--terminal-text);
		margin: 10px 0;
	}
	
	.certificate-name {
		font-size: 1.5em;
		font-weight: bold;
		color: var(--terminal-warning);
		margin: 15px 0;
		letter-spacing: 2px;
	}
	
	.certificate-date {
		margin-top: 20px;
		font-size: 0.9em;
		color: var(--terminal-dim);
	}
	
	/* Restart Button */
	.restart-container {
		text-align: center;
		margin: 30px 0;
	}
	
	.restart-button {
		background-color: rgba(139, 233, 253, 0.1);
		color: var(--terminal-accent);
		border: 1px solid var(--terminal-accent);
		padding: 12px 24px;
		font-family: 'Courier New', monospace;
		font-size: 1em;
		font-weight: bold;
		cursor: pointer;
		transition: all 0.3s ease;
		border-radius: 4px;
	}
	
	.restart-button:hover {
		background-color: rgba(139, 233, 253, 0.2);
		box-shadow: 0 0 15px rgba(139, 233, 253, 0.5);
		transform: scale(1.05);
	}
	
	.hidden {
		display: none;
	}
	
	/* Glitch Animation */
	@keyframes glitchIn {
		0% {
			opacity: 0;
			clip-path: inset(0 0 100% 0);
			transform: translateY(50px);
		}
		20% {
			clip-path: inset(33% 0 66% 0);
		}
		40% {
			clip-path: inset(66% 0 33% 0);
		}
		60% {
			clip-path: inset(33% 0 66% 0);
		}
		80% {
			clip-path: inset(10% 0 90% 0);
		}
		100% {
			opacity: 1;
			clip-path: inset(0 0 0 0);
			transform: translateY(0);
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Check if user should have access to this stage
		const stage2Completed = localStorage.getItem('puzzle_final-stage2-puzzle') === 'solved';
		if (!stage2Completed) {
			window.location.href = '/stage2';
			return;
		}
		
		// Show stage content after title is typed
		const stageTitle = document.querySelector('.stage-title');
		if (stageTitle) {
			stageTitle.addEventListener('typingComplete', () => {
				setTimeout(() => {
					const stageContent = document.querySelector('.stage-content');
					if (stageContent) {
						stageContent.style.opacity = '1';
					}
				}, 500);
			});
		}
		
		// Set current date for certificate
		const completionDate = document.getElementById('completion-date');
		if (completionDate) {
			const now = new Date();
			const options = { year: 'numeric', month: 'long', day: 'numeric' };
			completionDate.textContent = now.toLocaleDateString(undefined, options);
		}
		
		// Function to complete the mission
		window.completeMission = () => {
			// Add glitch effect to body
			document.body.classList.add('glitch-transition');
			
			setTimeout(() => {
				// Mark challenge as completed
				const challengeContainer = document.querySelector('.challenge-container');
				if (challengeContainer) {
					challengeContainer.classList.add('completed');
				}
				
				// Show mission complete
				const missionComplete = document.getElementById('mission-complete');
				if (missionComplete) {
					missionComplete.classList.remove('hidden');
					missionComplete.scrollIntoView({ behavior: 'smooth' });
				}
				
				// Start countdown timer
				startCountdown();
				
				// Store completion in localStorage
				localStorage.setItem('mission_completed', 'true');
				
				// Remove glitch effect
				document.body.classList.remove('glitch-transition');
			}, 1000);
		};
		
		// Function to start countdown timer
		function startCountdown() {
			const timerElement = document.querySelector('.timer-value');
			if (!timerElement) return;
			
			let timeLeft = 60;
			
			const countdownInterval = setInterval(() => {
				timeLeft--;
				timerElement.textContent = timeLeft;
				
				// Add urgency as time decreases
				if (timeLeft <= 10) {
					timerElement.style.color = '#ff5555';
					timerElement.style.fontSize = '1.8em';
					timerElement.style.animation = 'blink-text 0.5s infinite';
				}
				
				if (timeLeft <= 0) {
					clearInterval(countdownInterval);
					// Time's up - redirect to start
					alert("TIME'S UP! The Phantoms have launched their attack. Mission failed.");
					resetMission();
				}
			}, 1000);
			
			// Store the interval ID to clear it if user completes the challenge
			window.countdownInterval = countdownInterval;
		}
		
		// Function to reset mission
		function resetMission() {
			// Clear specific localStorage items but keep completion count
			const completionCount = localStorage.getItem('completion_count');
			const userCompletedKey = localStorage.getItem('user_completed_key');
			
			// Clear mission progress
			localStorage.removeItem('puzzle_password-puzzle');
			localStorage.removeItem('puzzle_key-verification');
			localStorage.removeItem('mission_completed');
			
			// Redirect to home page
			window.location.href = '/';
		}
		
		// Function to verify key and show QR code
		window.verifyKey = () => {
			// Clear countdown timer
			if (window.countdownInterval) {
				clearInterval(window.countdownInterval);
			}
			
			// Add glitch effect to body
			document.body.classList.add('glitch-transition');
			
			setTimeout(() => {
				// Show QR code
				const qrCodeReveal = document.getElementById('qr-code-reveal');
				if (qrCodeReveal) {
					qrCodeReveal.classList.remove('hidden');
					qrCodeReveal.scrollIntoView({ behavior: 'smooth' });
					
					// Update completion count
					const completionNumber = document.getElementById('completion-number');
					if (completionNumber) {
						// Get current count from localStorage or initialize to 0
						let count = parseInt(localStorage.getItem('completion_count') || '0');
						
						// Increment count only if this is a new completion
						if (!localStorage.getItem('user_completed_key')) {
							count++;
							localStorage.setItem('completion_count', count.toString());
							localStorage.setItem('user_completed_key', 'true');
						}
						
						// Display count with appropriate suffix
						let suffix = 'th';
						if (count % 10 === 1 && count % 100 !== 11) {
							suffix = 'st';
						} else if (count % 10 === 2 && count % 100 !== 12) {
							suffix = 'nd';
						} else if (count % 10 === 3 && count % 100 !== 13) {
							suffix = 'rd';
						}
						
						completionNumber.textContent = count + suffix;
					}
				}
				
				// Remove glitch effect
				document.body.classList.remove('glitch-transition');
			}, 1000);
		};
		
		// Restart button
		const restartButton = document.getElementById('restart-button');
		if (restartButton) {
			restartButton.addEventListener('click', () => {
				// Clear localStorage except for completion count
				const completionCount = localStorage.getItem('completion_count');
				const userCompletedKey = localStorage.getItem('user_completed_key');
				localStorage.clear();
				if (completionCount) {
					localStorage.setItem('completion_count', completionCount);
				}
				if (userCompletedKey) {
					localStorage.setItem('user_completed_key', userCompletedKey);
				}
				
				// Redirect to home page
				window.location.href = '/';
			});
		}
	});
</script>
